//Create flask app
from flask import Flask, request, render_template, redirect, url_for, session
from flask_jwt_extended import JWTManager, jwt_required, create_access_token, get_jwt_identity
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from werkzeug.utils import secure_filename
from PIL import Image
from authlib.integrations.flask_client import OAuth
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
import os

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['JWT_SECRET_KEY'] = 'your-secret-key'
app.config['JWT_ACCESS_TOKEN_EXPIRES'] = False  # Tokens don't expire

app.secret_key = 'your-secret-key'  # Change this to a secure secret key

jwt = JWTManager(app)

limiter = Limiter(
    app,
    key_func=get_remote_address,
    default_limits=["5 per minute"]
)

# Google OAuth Configuration
oauth = OAuth(app)
google = oauth.register(
    name='google',
    client_id='your-google-client-id',
    client_secret='your-google-client-secret',
    authorize_url='https://accounts.google.com/o/oauth2/auth',
    authorize_params=None,
    authorize_kwargs=None,
    request_token_url=None,
    request_token_params=None,
    request_token_kwargs=None,
    access_token_url='https://accounts.google.com/o/oauth2/token',
    access_token_params=None,
    access_token_kwargs=None,
    refresh_token_url=None,
    refresh_token_params=None,
    refresh_token_kwargs=None,
    redirect_uri='your-redirect-uri',
    client_kwargs={'scope': 'openid profile email'},
)

# Login Manager Configuration
login_manager = LoginManager()
login_manager.login_view = 'login'
login_manager.init_app(app)

# User Class for Flask-Login
class User(UserMixin):
    def __init__(self, user_id):
        self.id = user_id

@login_manager.user_loader
def load_user(user_id):
    return User(user_id)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
@jwt_required()
@limiter.limit("5 per minute")
def upload_image():
    if 'image' not in request.files:
        return redirect(url_for('index'))

    image = request.files['image']
    if image.filename == '':
        return redirect(url_for('index'))

    if image:
        filename = secure_filename(image.filename)
        image.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
        return redirect(url_for('show_image', filename=filename))

@app.route('/image/<filename>')
def show_image(filename):
    return render_template('show_image.html', filename=filename)

@app.route('/zoom/<filename>')
def zoom_image(filename):
    return render_template('zoom_image.html', filename=filename)

@app.route('/login')
def login():
    return google.authorize_redirect(redirect_uri=url_for('auth', _external=True))

@app.route('/auth')
def auth():
    token = google.authorize_access_token()
    user_info = google.parse_id_token(token)
    user_id = user_info['sub']

    # Perform your own logic to identify the user or save user info in your database
    # In this example, we'll simply store the user_id in the session
    session['user_id'] = user_id
    user = User(user_id)
    login_user(user)

    return redirect(url_for('index'))

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('index'))

if __name__ == '__main__':
    os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
    app.run(debug=True)

//create HTML templates
<!DOCTYPE html>
<html>
<head>
    <title>Zoomed-In Image</title>
    <style>
        /* Add CSS styles for zooming effect here */
    </style>
</head>
<body>
    <h1>Zoomed-In Image:</h1>
    <img src="{{ url_for('static', filename='uploads/' + filename) }}" alt="{{ filename }}" id="zoom-image">
    <p>Image Name: {{ filename }}</p>

    <!-- Add JavaScript for zooming effect here -->
</body>
</html>
